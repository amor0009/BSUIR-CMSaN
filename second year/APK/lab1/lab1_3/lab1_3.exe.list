EMU8086 GENERATED LISTING. MACHINE CODE <- SOURCE.
 
lab1_3.exe -- emu8086 assembler version: 4.05  
 
[ 26.02.2024  --  18:36:43 ] 
 
===================================================================================================
[LINE]     LOC: MACHINE CODE                          SOURCE
===================================================================================================
 
[   1]        :                                       .model small
[   2]        :                                       .stack 100h
[   3]        :                                       
[   4]        :                                       .data
[   5]        :                                       
[   6]    0100: 57 72 69 74 65 20 65 72 72 6F 72 21   Error_Write db "Write error!",0Dh,0Ah,'$'
                0D 0A 24                            
[   7]    010F: 52 65 61 64 20 65 72 72 6F 72 21 0D   Error_Read db "Read error!",0Dh,0Ah,'$'
                0A 24                               
[   8]    011D: 42 79 74 65 20 73 65 6E 74 3A 20 24   Information db "Byte sent: $"
                                                    
[   9]    0129: 41                                    Data_Byte db 'A'
[  10]    012A: 00                                    Data_Byte2 db ?
[  11]        :                                       
[  12]        :                                       .code
[  13]        :                                       
[  14]    0130:                                       Init_COM1 proc
[  15]    0130: B0 80                                 mov al,80h
[  16]    0132: BA FB 03                              mov dx,3FBh
[  17]    0135: EE                                    out dx,al
[  18]        :                                       
[  19]    0136: BA F8 03                              mov dx,3F8h
[  20]    0139: B0 00                                 mov al,00h
[  21]    013B: EE                                    out dx,al
[  22]    013C: B0 0C                                 mov al,0Ch
[  23]    013E: BA F9 03                              mov dx,3F9h
[  24]    0141: EE                                    out dx,al
[  25]        :                                       
[  26]    0142: BA FC 03                              mov dx,3FCh
[  27]    0145: B0 0B                                 mov al,00001011b
[  28]    0147: EE                                    out dx,al
[  29]        :                                       
[  30]    0148: BA F9 03                              mov dx,3F9h
[  31]    014B: B0 00                                 mov al,0
[  32]    014D: EE                                    out dx,al
[  33]    014E: C3                                    ret
[  34]        :                                       Init_COM1 endp
[  35]        :                                       
[  36]    014F:                                       IsWrite_COM1 proc
[  37]    014F: 32 C0                                 xor al,al
[  38]    0151: BA FD 03                              mov dx,3FDh
[  39]    0154: EC                                    in al,dx
[  40]    0155: A8 10                                 test al,10h
[  41]    0157: 75 01                                 jnz NoWRite
[  42]    0159: C3                                    ret
[  43]        :                                       IsWrite_COM1 endp
[  44]        :                                       
[  45]    015A:                                       NoWRite proc
[  46]    015A: B4 09                                 mov ah,9
[  47]    015C: BA 00 00                              mov dx,offset Error_Write
[  48]    015F: CD 21                                 int 21h
[  49]    0161: C3                                    ret
[  50]        :                                       NoWRite endp
[  51]        :                                       
[  52]    0162:                                       IsRead_COM2 proc
[  53]    0162: 32 C0                                 xor al,al
[  54]    0164: BA FD 03                              mov dx,3FDh
[  55]    0167: EC                                    in al,dx
[  56]    0168: A8 02                                 test al,10b
[  57]    016A: 75 01                                 jnz NoRead
[  58]    016C: C3                                    ret
[  59]        :                                       IsRead_COM2 endp
[  60]        :                                       
[  61]    016D:                                       NoRead proc
[  62]    016D: B4 09                                 mov ah,9
[  63]    016F: BA 0F 00                              mov dx,offset Error_Read
[  64]    0172: CD 21                                 int 21h
[  65]    0174: C3                                    ret
[  66]        :                                       NoRead endp
[  67]        :                                       
[  68]    0175:                                       Send_Byte proc
[  69]    0175: BA F8 03                              mov dx,3F8h
[  70]    0178: A0 29 00                              mov al,Data_Byte
[  71]    017B: EE                                    out dx,al
[  72]    017C: C3                                    ret
[  73]        :                                       Send_Byte endp
[  74]        :                                       
[  75]    017D:                                       Read_Byte proc
[  76]    017D: BA F8 03                              mov dx,3F8h
[  77]    0180: EC                                    in al,dx
[  78]    0181: A2 2A 00                              mov Data_Byte2,al
[  79]    0184: C3                                    ret
[  80]        :                                       Read_Byte endp
[  81]        :                                       
[  82]    0185:                                       Exit proc
[  83]    0185: B8 00 4C                              mov ax,4C00h
[  84]    0188: CD 21                                 int 21h
[  85]    018A: C3                                    ret
[  86]        :                                       Exit endp
[  87]        :                                       
[  88]    018B:                                       start:
[  89]    018B: B8 10 00                              mov ax,@data
[  90]    018E: 8E D8                                 mov ds,ax
[  91]    0190: E8 9D FF                              call Init_COM1
[  92]    0193: E8 B9 FF                              call IsWrite_COM1
[  93]    0196: E8 DC FF                              call Send_Byte
[  94]    0199: B0 02                                 mov al,2
[  95]    019B: E8 C4 FF                              call IsRead_COM2
[  96]    019E: E8 DC FF                              call Read_Byte
[  97]    01A1: BA 1D 00                              mov dx,offset Information
[  98]    01A4: B4 09                                 mov ah,9
[  99]    01A6: CD 21                                 int 21h
[ 100]    01A8: B4 02                                 mov ah,02h
[ 101]    01AA: 8A 16 2A 00                           mov dl,Data_Byte2
[ 102]    01AE: CD 21                                 int 21h
[ 103]    01B0: E8 D2 FF                              call Exit
[ 104]        :                                       
[ 105]        :                                       end start
[ 106]        :                                       
 
===================================================================================================
 
EXE HEADER - bytes from 0000 to 01FF inclusive.

0000: 4D      -   exe signature (M)
0001: 5A      -   exe signature (Z)
0002: B3      -   bytes on last page (l.byte)
0003: 01      -   bytes on last page (h.byte)
0004: 02      -   512 byte pages in file (l.byte)
0005: 00      -   512 byte pages in file (h.byte)
0006: 01      -   relocations (l.byte)
0007: 00      -   relocations (h.byte)
0008: 20      -   paragraphs in header (l.byte)
0009: 00      -   paragraphs in header (h.byte)
000A: 00      -   minimum memory (l.byte)
000B: 00      -   minimum memory (h.byte)
000C: FF      -   maximum memory (l.byte)
000D: FF      -   maximum memory (h.byte)
000E: 00      -   SS - stack segment (l.byte)
000F: 00      -   SS - stack segment (h.byte)
0010: 00      -   SP - stack pointer (l.byte)
0011: 01      -   SP - stack pointer (h.byte)
0012: FB      -   check sum (l.byte)
0013: DC      -   check sum (h.byte)
0014: 5B      -   IP - instruction pointer (l.byte)
0015: 00      -   IP - instruction pointer (h.byte)
0016: 13      -   CS - code segment (l.byte)
0017: 00      -   CS - code segment (h.byte)
0018: 1E      -   relocation table adress (l.byte)
0019: 00      -   relocation table adress (h.byte)
001A: 00      -   overlay number (l.byte)
001B: 00      -   overlay number (h.byte)
001C: 01      -   signature (l.byte)
001D: 00      -   signature (h.byte)
001E: 5C      -   relocation table - offset inside segment (l.byte)
001F: 00      -   relocation table - offset inside segment (h.byte)
0020: 13      -   relocation table - segment anchor (l.byte)
0021: 00      -   relocation table - segment anchor (h.byte)
0022 to 01FF  -   reserved relocation area  (00) 




===================================================================================================
