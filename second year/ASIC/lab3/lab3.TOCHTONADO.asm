.model small 
.stack 100h    ; Выделение стека размером 100h байт (256 байт)

.data          
    message1 db 'Input 5x6: ',0Dh, 0Ah, '$'  
    message2 db 'Result: $'                  
                  
    array  db 31 dup (0)  ; Объявление массива из 31 байта, каждый инициализирован значением 0
    result dw 6 dup (1)   ; Объявление массива из 6 слов (16 бит), каждое инициализировано значением 1
    flag    db  0         ; Объявление флага с одним байтом и инициализацией 0
    enter db 0Dh, 0Ah, '$'; Строка для перевода строки и завершающего символа
    symbol db '$$'        ; Строка "$$" с завершающим символом
        
.code          
START:     
   mov   AX, @data       
   mov   DS, AX          
   
   mov   AH, 09h          ; Установка функции DOS для вывода строки
   mov   DX, offset Message1  
   int   21h              

   mov   CX,30            ; Установка счетчика цикла CX в 30
   xor   BX,BX            ; Обнуление регистра BX
   lea   DI,array         ; Загрузка в DI адреса массива array
   lea   SI,result        ; Загрузка в SI адреса массива result
cycle:                   
   mov   AL,' '           ; Загрузка пробела в AL
   mov   BP, AX           ; Копирование AL в регистр BP
   mov   [symbol], AL     
   mov   AH, 09h          
   mov   DX, offset symbol 
   int   21h              

   mov   AX, BP           ; Копирование BP обратно в AX
   call  ASC2HEX          ; Вызов процедуры ASC2HEX

   cmp   flag, 1
   jne   ppp              ; Переход к метке ppp, если флаг не равен 1
   neg   AX               ; Инверсия значения в AX, если флаг равен 1
   dec   flag             ; Уменьшение значения флага на 1
   
ppp:                          
   mov   [DI], AX            ; Сохранение значения AX в памяти по адресу DI
   mov   BP, [SI]            ; Загрузка значения из памяти по адресу SI в регистр BP
   mul   [SI]                ; Умножение значения в AX на значение в памяти по адресу SI
   mov   [SI], AX            ; Сохранение результата умножения в памяти по адресу SI
   inc   DI                  ; Увеличение DI на 1 (переход к следующему элементу массива)
   inc   SI               
   inc   SI                  ; Увеличение SI на 1 (переход к следующему слову массива)
   dec   CX                 
   inc   BX                
   
   cmp   BX, 5               
   jnz   next                ; Переход к метке next, если BX не равно 5
   lea   SI, result          ; Загрузка адреса массива result в регистр SI
   xor   BX,BX               
   mov   DX,offset enter     
   mov   AH,9           
   int   21h                
   
next:                         
   cmp   CX, 0               
   jne   cycle               ; Переход к метке cycle, если CX не равно 0
   lea   SI, result          ; Загрузка адреса массива result в регистр SI
   mov   CX, 5               ; Установка счетчика цикла CX в 5
   jmp   exit                ; Безусловный переход к метке exit

ASC2HEX proc                 
   push  CX                  
   push  BX                  
   push  SI                  
   push  DI                  
   xor   SI,SI               
   mov   BX,10               ; Загрузка значения 10 в регистр BX (для деления)
   mov   CX,2                ; Загрузка значения 2 в регистр CX (для двузначного ввода)    
   
typeDigit:                   
   xor   AX,AX               ; Обнуление регистра AX
   int   16h                 ; BIOS: ожидание ввода ASCII-кода клавиши
   
   mov   BP, AX              ; Копирование введенного символа в регистр BP
   mov   [symbol], AL        
   mov   AH, 09h             
   mov   DX, offset symbol   
   int   21h                 
   mov   AX, BP              ; Восстановление введенного символа в регистр AX
   
   cmp   AL,'-'              
   jne   positive            ; Переход к метке positive, если не "-"
   
   inc   flag                ; Увеличение флага на 1 (обозначение отрицательного числа)
   
positive:                     ; (обработка положительных чисел)
   cmp   AL,'0'             
   jb    typeDigit            ; Переход к метке typeDigit, если меньше '0'
   cmp   AL,'9'               
   ja    typeDigit            ; Переход к метке typeDigit, если больше '9'
   and   AX,0Fh               ; Оставление только младшей тетрады в AX
   xchg  AX,SI                ; Обмен значениями AX и SI
   mul   BX                   ; Умножение значения в SI на BX и результат в AX
   add   SI,AX                ; Добавление результата умножения к SI
   loop  typeDigit            ; Уменьшение счетчика цикла и переход к typeDigit
   xchg  AX,SI                ; Обмен значениями AX и SI (восстановление исходного AX)
   pop   DI                   ; Восстановление регистра DI из стека
   pop   SI                   ; Восстановление регистра SI из стека
   pop   BX                   ; Восстановление регистра BX из стека
   pop   CX                   ; Восстановление регистра CX из стека
RET                           ; Возврат из процедуры ASC2HEX

ASC2HEX endp                  ; Конец процедуры ASC2HEX

OutInt proc                    ; для вывода целых чисел
    push CX                    ; Сохранение регистра CX в стеке
    test AX, AX                ; Проверка знака числа
    jns  oi1                   ; Переход к oi1, если положительное

    mov  CX, AX                ; Копирование числа в CX
    mov  AH, 02h               ; Установка функции DOS для вывода символа
    mov  DL, '-'               ; Загрузка символа минуса в DL (для отрицательных чисел)
    int  21h                    ; Вывод минуса
    mov  AX, CX                ; Восстановление значения AX

oi1:  
    xor  CX, CX                ; Обнуление регистра CX (счетчик цифр)
    mov  BX, 10                ; Загрузка значения 10 в регистр BX

oi2:
    xor  DX,DX                 ; Обнуление регистра DX (для хранения остатка)
    div  BX                    ; Деление AX на BX, результат в AX, остаток в DX
    push DX                   ; Запись остатка в стеке
    inc  CX                   ; Увеличение счетчика цифр
    test AX, AX               ; Проверка, завершено ли деление
    jnz  oi2                   ; Переход к oi2, если не завершено

    mov  AH, 02h               ; Установка функции DOS для вывода символа
oi3:
    pop  DX                    ; Извлечение цифры из стека
    add  DL, '0'               ; Преобразование цифры в символ
    int  21h                    ; Вывод символа
    loop oi3                   ; Повторять, пока есть цифры для вывода
    pop  CX                    ; Извлечение регистра CX из стека
    ret                       ; Возврат из процедуры OutInt

OutInt endp                    ; Конец процедуры OutInt

exit:  
   mov AX, [SI]               ; Загрузка значения из массива result в AX
   call OutInt                ; Вызов процедуры OutInt для вывода числа
   mov DX, ' '                ; Загрузка пробела в DX
   int 21h                    ; Вывод пробела
   inc SI                     ; Увеличение SI на 1 (переход к следующему элементу)
   inc SI                     ; Увеличение SI на 1 (переход к следующему слову)
   dec CX                     ; Уменьшение счетчика CX на 1
   cmp CX, 0                   ; Сравнение CX с 0
   jne exit                   ; Переход к exit, если CX не равно 0

end START                    ; Завершение программы и указание начальной точки (START)