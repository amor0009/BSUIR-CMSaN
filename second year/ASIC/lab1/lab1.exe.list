EMU8086 GENERATED LISTING. MACHINE CODE <- SOURCE.
 
lab1.exe -- emu8086 assembler version: 4.05  
 
[ 02.09.2023  --  20:58:22 ] 
 
===================================================================================================
[LINE]     LOC: MACHINE CODE                          SOURCE
===================================================================================================
 
[   1]        :                                       ; lab1.asm
[   2]        :                                       ; вариант №1: вывод на экран сообщения "Hello World!"
[   3]        :                                       .model small    ; модель памяти для .exe
[   4]        :                                       .stack 100h     ; выделение 256 байт для стэка программы
[   5]        :                                       .code           ; сегмент кода
[   6]    0100: B8 12 00                              start:  mov ax,@data    ;
[   7]    0103: 8E D8                                 mov ds,ax       ; загружает значение из регистра AX в ркгистр DS
[   8]    0105: BA 00 00                              mov dx,offset message  ;загрузка в регистр DX адресса строки "message"
[   9]    0108: B4 09                                 mov ah,9        ; загрузка номера функции DOS для вывода строки в регистр AH
[  10]    010A: CD 21                                 int 21h         ; вызов системной функции DOS с помощью прерывания 21h для вывода строки
[  11]    010C: B8 00 4C                              mov ax,4C00h    ; вызов функции DOS для завершения программы
[  12]    010F: CD 21                                 int 21h         ; вызов прерывания 21h для завершения программы
[  13]        :                                       .data           ; сегомент данных
[  14]    0120: 48 65 6C 6C 6F 20 57 6F 72 6C 64 21   message db "Hello World!",0Dh,0Ah,'$'   ; выводимое сообщение
                0D 0A 24                            
[  15]        :                                       end start       ; конец программы
[  16]        :                                       
 
===================================================================================================
 
EXE HEADER - bytes from 0000 to 01FF inclusive.

0000: 4D      -   exe signature (M)
0001: 5A      -   exe signature (Z)
0002: 2F      -   bytes on last page (l.byte)
0003: 01      -   bytes on last page (h.byte)
0004: 02      -   512 byte pages in file (l.byte)
0005: 00      -   512 byte pages in file (h.byte)
0006: 01      -   relocations (l.byte)
0007: 00      -   relocations (h.byte)
0008: 20      -   paragraphs in header (l.byte)
0009: 00      -   paragraphs in header (h.byte)
000A: 00      -   minimum memory (l.byte)
000B: 00      -   minimum memory (h.byte)
000C: FF      -   maximum memory (l.byte)
000D: FF      -   maximum memory (h.byte)
000E: 00      -   SS - stack segment (l.byte)
000F: 00      -   SS - stack segment (h.byte)
0010: 00      -   SP - stack pointer (l.byte)
0011: 01      -   SP - stack pointer (h.byte)
0012: 6A      -   check sum (l.byte)
0013: 2A      -   check sum (h.byte)
0014: 00      -   IP - instruction pointer (l.byte)
0015: 00      -   IP - instruction pointer (h.byte)
0016: 10      -   CS - code segment (l.byte)
0017: 00      -   CS - code segment (h.byte)
0018: 1E      -   relocation table adress (l.byte)
0019: 00      -   relocation table adress (h.byte)
001A: 00      -   overlay number (l.byte)
001B: 00      -   overlay number (h.byte)
001C: 01      -   signature (l.byte)
001D: 00      -   signature (h.byte)
001E: 01      -   relocation table - offset inside segment (l.byte)
001F: 00      -   relocation table - offset inside segment (h.byte)
0020: 10      -   relocation table - segment anchor (l.byte)
0021: 00      -   relocation table - segment anchor (h.byte)
0022 to 01FF  -   reserved relocation area  (00) 




===================================================================================================
