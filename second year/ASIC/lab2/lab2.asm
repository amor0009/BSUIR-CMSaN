; lab2.asm (.exe);
; вариант №1: сортировка символов строки по ASCII коду символа
.model small                        ; модель памяти для .exe
.stack 100h                         ; выделение 256 байт для стэка программы 

.data                               ; сегиент данных
    str db 200 dup('$')             ; исходная строка  
    message1 db "Введите строку: $"
    message2 db "Отсортированная строка: $"  
    pereh db " ", 0Dh, 0Ah, "$"  
    
.code                               ; сегмент кода
    mov ax, @data                   ; загрузка адреса сегмета данных в регистр ax
    mov ds, ax                      ; загрузка значения регистра ax в регистр ds   
     
    ; вывод сообщения 
    mov dx, offset message1
    mov ah, 09h   
    int 21h
     
    ;ввод строки
    mov ah, 0ah
    lea dx, str
    int 21h  
    
    lea si, str + 1
    mov bl, ptr byte[si] 
    
    ; внешний цикл
    mov si, 0                         ; индекс источника равен 0
    outer:
        ; внутренний цикл
        mov di, 0                     ; индекс приёмника равен 0
        inner:
            mov al, str[di+ 2]        ; загрузка первого символа в регистр al
            cmp al, str[di + 1 + 2]   ; сравниваем текущий символ со следующим
            ja skip_swap              ; если выше
            ; меняем символы местами
            mov ah, str[di + 1 + 2]   ; загрузка следующего символа в регистр ah
            mov dl, ah                ; загрузка символа и зрегистра ah в новую строку
            mov ah, al                ; загрузка текущего символа в регистр ah
            mov str[di + 1 + 2], ah   ; загрузка текущего символа из регистра ah в следующий символ
            mov al, dl            
            mov str[di + 2], al
            skip_swap:
            inc di                    ; увеличение di на 1
            cmp di, bx                ; сравниваем di и длинну исходной строки
            jbe inner                 ; если ниже или равно
        
        ; увеличиваем si
        inc si                        ; увеличение si на 1
        cmp si, bx                    ; сравниваем si и длинну исходной строки
        jbe outer                     ; если ниже или равно
    
    ; вывод отсортированной строки  
    mov dx, offset pereh
    mov ah, 09h                     ; загрузка номера функции DOS для вывода строки
    int 21h                         ; прерывание для вызова функции вывода строки
    
    mov dx, offset message2
    mov ah, 09h                     ; загрузка номера функции DOS для вывода строки
    int 21h                         ; прерывание для вызова функции вывода строки   
    
    mov dx, offset str + 2
    mov ah, 09h                     ; загрузка номера функции DOS для вывода строки
    int 21h                         ; прерывание для вызова функции вывода строки
    
    mov ah, 4Ch                     ; вызов функции DOS для завершения программы
    int 21h                         ; вызов прерывания 21h для завершения программы
end