EMU8086 GENERATED LISTING. MACHINE CODE <- SOURCE.
 
lab2.exe -- emu8086 assembler version: 4.05  
 
[ 09.09.2023  --  18:48:42 ] 
 
===================================================================================================
[LINE]     LOC: MACHINE CODE                          SOURCE
===================================================================================================
 
[   1]        :                                       .model small
[   2]        :                                       .stack 100h
[   3]        :                                       
[   4]        :                                       .data
[   5]    0100: 48 65 6C 6C 6F 20 57 6F 72 6C 64 24   str db 'Hello World$'
                                                    
[   6]    010C:                                       len equ $-str
[   7]    010C: 00                                    temp db 0
[   8]        :                                       
[   9]        :                                       .code
[  10]    0110: B8 10 00                              mov ax, @data
[  11]    0113: 8E D8                                 mov ds, ax
[  12]        :                                       
[  13]        :                                       ; ??????? ????
[  14]    0115: BE 00 00                              mov si, 0
[  15]    0118:                                       outer:
[  16]        :                                       ; ?????????? ????
[  17]    0118: BF 00 00                              mov di, 0
[  18]    011B:                                       inner:
[  19]    011B: 8A 05                                 mov al, str[di]
[  20]    011D: 3A 45 01                              cmp al, str[di + 1]
[  21]    0120: 77 11                                 ja skip_swap
[  22]        :                                       ; ?????? ??????? ???????
[  23]    0122: 8A 65 01                              mov ah, str[di + 1]
[  24]    0125: 88 26 0C 00                           mov temp, ah
[  25]    0129: 8A E0                                 mov ah, al
[  26]    012B: 88 65 01                              mov str[di + 1], ah
[  27]    012E: A0 0C 00                              mov al, temp
[  28]    0131: 88 05                                 mov str[di], al
[  29]    0133:                                       skip_swap:
[  30]    0133: 47                                    inc di
[  31]    0134: 83 FF 0B                              cmp di, len - 1
[  32]    0137: 76 E2                                 jbe inner
[  33]        :                                       
[  34]        :                                       ; ??????????? i
[  35]    0139: 46                                    inc si
[  36]    013A: 83 FE 0B                              cmp si, len - 1
[  37]    013D: 76 D9                                 jbe outer
[  38]        :                                       
[  39]        :                                       ; ??????? ??????????????? ??????
[  40]    013F: BA 00 00                              mov dx, offset str
[  41]    0142: B4 09                                 mov ah, 09h
[  42]    0144: CD 21                                 int 21h
[  43]        :                                       
[  44]    0146: B4 4C                                 mov ah, 4Ch
[  45]    0148: CD 21                                 int 21h
[  46]        :                                       end
[  47]        :                                       
 
===================================================================================================
 
EXE HEADER - bytes from 0000 to 01FF inclusive.

0000: 4D      -   exe signature (M)
0001: 5A      -   exe signature (Z)
0002: 4A      -   bytes on last page (l.byte)
0003: 01      -   bytes on last page (h.byte)
0004: 02      -   512 byte pages in file (l.byte)
0005: 00      -   512 byte pages in file (h.byte)
0006: 01      -   relocations (l.byte)
0007: 00      -   relocations (h.byte)
0008: 20      -   paragraphs in header (l.byte)
0009: 00      -   paragraphs in header (h.byte)
000A: 00      -   minimum memory (l.byte)
000B: 00      -   minimum memory (h.byte)
000C: FF      -   maximum memory (l.byte)
000D: FF      -   maximum memory (h.byte)
000E: 00      -   SS - stack segment (l.byte)
000F: 00      -   SS - stack segment (h.byte)
0010: 00      -   SP - stack pointer (l.byte)
0011: 01      -   SP - stack pointer (h.byte)
0012: 30      -   check sum (l.byte)
0013: E2      -   check sum (h.byte)
0014: 00      -   IP - instruction pointer (l.byte)
0015: 00      -   IP - instruction pointer (h.byte)
0016: 11      -   CS - code segment (l.byte)
0017: 00      -   CS - code segment (h.byte)
0018: 1E      -   relocation table adress (l.byte)
0019: 00      -   relocation table adress (h.byte)
001A: 00      -   overlay number (l.byte)
001B: 00      -   overlay number (h.byte)
001C: 01      -   signature (l.byte)
001D: 00      -   signature (h.byte)
001E: 01      -   relocation table - offset inside segment (l.byte)
001F: 00      -   relocation table - offset inside segment (h.byte)
0020: 11      -   relocation table - segment anchor (l.byte)
0021: 00      -   relocation table - segment anchor (h.byte)
0022 to 01FF  -   reserved relocation area  (00) 




===================================================================================================
